DROP TABLE IF EXISTS TAG_OBJECT;
DROP TABLE IF EXISTS OBJECT_TYPE;
DROP TABLE IF EXISTS HIERARCHY_2;
DROP TABLE IF EXISTS HIERARCHY_1;
DROP TABLE IF EXISTS EAS_GROUP;
DROP TABLE IF EXISTS OTD;
DROP TABLE IF EXISTS ACKNOWLEDGE_ALLOWED;
DROP TABLE IF EXISTS ALWAYS_VISIBLE;
DROP TABLE IF EXISTS NODE;
DROP TABLE IF EXISTS LOCATION;


CREATE TABLE OBJECT_TYPE
(
	ObjectTypeId int PRIMARY KEY IDENTITY (1,1),
	ObjectTypeName varchar(50) NOT NULL UNIQUE
)
GO

CREATE TABLE HIERARCHY_1
(
	Hierarchy1Id int PRIMARY KEY IDENTITY (1,1),
	Hierarchy1Name varchar(50) NOT NULL UNIQUE
)
GO

CREATE TABLE HIERARCHY_2
(
	Hierarchy2Id int PRIMARY KEY IDENTITY (1,1),
	Hierarchy2Name varchar(50) NOT NULL UNIQUE,
	Hierarchy1Id int NOT NULL FOREIGN KEY REFERENCES HIERARCHY_1(Hierarchy1Id)
)
GO

CREATE TABLE EAS_GROUP
(
	EasGroupId int PRIMARY KEY IDENTITY (1,1),
	EasGroupName varchar(50) NOT NULL UNIQUE
)
GO

CREATE TABLE OTD
(
	OtdId int PRIMARY KEY IDENTITY (1,1),
	OtdName varchar(50) NOT NULL UNIQUE
)
GO

CREATE TABLE ACKNOWLEDGE_ALLOWED
(
	AcknowledgeAllowedId int PRIMARY KEY IDENTITY (1,1),
	AcknowledgeAllowedLocation varchar(200) NOT NULL UNIQUE,
)
GO

CREATE TABLE ALWAYS_VISIBLE
(
	AlwaysVisibleId int PRIMARY KEY IDENTITY (1,1),
	AlwaysVisibleLocation varchar(200) NOT NULL UNIQUE,
)
GO

CREATE TABLE LOCATION
(
	LocationId int PRIMARY KEY IDENTITY (1,1),
	LocationName varchar(200) NOT NULL UNIQUE
)
GO

CREATE TABLE NODE
(
	NodeId int PRIMARY KEY IDENTITY (1,1),
	NodeName varchar(50) NOT NULL UNIQUE
)
GO

CREATE TABLE TAG_OBJECT
(
	ObjectId int PRIMARY KEY IDENTITY (1,1),
	SfiNumber int NOT NULL,
	MainEqNumber varchar(50) NOT NULL,
	EqNumber varchar(50),
	ObjectDescription varchar(50) NOT NULL UNIQUE,
	ObjectTypeId int NOT NULL FOREIGN KEY REFERENCES OBJECT_TYPE(ObjectTypeId),
	Hierarchy1Id int NOT NULL FOREIGN KEY REFERENCES HIERARCHY_1(Hierarchy1Id),
	Hierarchy2Id int NOT NULL FOREIGN KEY REFERENCES HIERARCHY_2(Hierarchy2Id),
	EasGroupId int NOT NULL FOREIGN KEY REFERENCES EAS_GROUP(EasGroupId),
	OtdId int NOT NULL FOREIGN KEY REFERENCES EAS_GROUP(EasGroupId),
	AcknowledgeAllowedId int FOREIGN KEY REFERENCES ACKNOWLEDGE_ALLOWED(AcknowledgeAllowedId),
	AlwaysVisibleId int FOREIGN KEY REFERENCES ALWAYS_VISIBLE(AlwaysVisibleId),
)
GO