@page "/customer-objects"

@using AutomationListLibrary
@using AutomationListLibrary.Data
@using AutomationListLibrary.DataAccess
@using AutomationListLibrary.DataManager
@using AutomationListUI.Models
@using AutomationListUI.Services
@using AutomationListUI.Validators
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@using System.ComponentModel.DataAnnotations

@inject IObjectService _objectDB
@inject ITagService _tagDB
@inject CategoryDataManager _categoryDB
@inject SubCategoryDataManager _subCategoryDB

<h1>Customer Objects Page</h1>
<hr />        
<br/>

<h4>Objects</h4>

<SfGrid 
	TValue="DisplayObjectModel"
	@ref="@ObjectGrid"
	AllowFiltering="true"
	AllowReordering="true"
	AllowResizing="true"
	AllowSelection="true"
	AllowSorting="true"
	Height="400"
	EnableStickyHeader=true
	Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update","ExcelExport","Search"})">
	<GridEvents RowSelected="GetSelectedObject" TValue="DisplayObjectModel" ></GridEvents>
	<SfDataManager AdaptorInstance="@typeof(CustomAdaptor)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager>
	<GridEditSettings 
		AllowAdding="true" 
		AllowEditing="true" 
		AllowDeleting="true"
		ShowConfirmDialog="false" 
		ShowDeleteConfirmDialog="true" 
		Mode="EditMode.Normal" />
	<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"/>
	<GridPageSettings PageSizes="true"/>
	<GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single"/>
	<GridColumns>
		<GridColumn Field=@nameof(DisplayObjectModel.SfiNumber) HeaderText="Sfi Nr" EditType="EditType.DefaultEdit" Width="120" />
		<GridColumn Field=@nameof(DisplayObjectModel.MainEqNumber) HeaderText="Main Eq Nr" Width="120" />
		<GridColumn Field=@nameof(DisplayObjectModel.EqNumber) HeaderText="Eq Nr" Width="120" />
		<GridColumn Field=@nameof(DisplayObjectModel.FullObjectName) HeaderText="Object Name" IsPrimaryKey="true" />
		<GridColumn Field=@nameof(DisplayObjectModel.Description) HeaderText="Description" />
		<GridColumn Field=@nameof(DisplayObjectModel.VduGroup) HeaderText="Vdu Group" />
		<GridColumn Field=@nameof(DisplayObjectModel.Otd) HeaderText="OTD" EditType="EditType.DropDownEdit" EditorSettings="@OtdEditParams"/>
		<GridColumn Field=@nameof(DisplayObjectModel.Cabinet) HeaderText="Cabinet" EditType="EditType.DropDownEdit" EditorSettings="@CabinetEditParams" />
	</GridColumns>
</SfGrid>
<br />
<p>@message</p>
<br />
<h4>Tags</h4>
<SfGrid DataSource="@Tags"
		@ref="@TagGrid"
		AllowReordering="true"
		AllowResizing="true"
		AllowSelection="true"
		Height="300"
		Toolbar=@TagToolbarItems>
	<GridEvents 
		OnToolbarClick="ToolbarClickHandler" 
		RowSelected="GetSelectedTag" 
		TValue="DisplayTagModel" 
		CellSaved="CellSavedHandler" />
	<GridEditSettings 
		AllowAdding="true"
		AllowEditing="true"
		AllowDeleting="true" 
		ShowConfirmDialog="false"
		ShowDeleteConfirmDialog="true"
		Mode="EditMode.Batch">
	</GridEditSettings>
	<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox" />
	<GridPageSettings PageSizes="true" />
	<GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Single" />
	<GridColumns>
		<GridColumn Field=@nameof(DisplayTagModel.FullTagName) HeaderText="Tag Name" IsPrimaryKey="true" Width="160" AllowEditing=false >
			<Template>
				@{
					var tag = (context as DisplayTagModel);
					if (tag.ObjectId == 0)
					{
						tag.ObjectId = SelectedObject.Id;
					}
				}
			</Template>
		</GridColumn>
		<GridColumn Field=@nameof(DisplayTagModel.EqSuffix) HeaderText="Eq Suffix" EditType="EditType.DefaultEdit" />
		<GridColumn Field=@nameof(DisplayTagModel.Description) HeaderText="Description" Width="100" />
		<GridColumn Field=@nameof(DisplayTagModel.IoType) HeaderText="IO Type" EditType="EditType.DropDownEdit">
		    <EditTemplate>
				<SfDropDownList TItem="DisplayTagModel" TValue="string" @bind-Value="@((context as DisplayTagModel).IoType)" DataSource="@ioTypes">
					<DropDownListFieldSettings Value="IoType" Text="IoType"></DropDownListFieldSettings>
                </SfDropDownList>
            </EditTemplate>
		</GridColumn>
		<GridColumn Field=@nameof(DisplayTagModel.SignalType) HeaderText="Signal Type" EditType="EditType.DropDownEdit" EditorSettings="@SignalTypeEditParams" />
		<GridColumn Field=@nameof(DisplayTagModel.SignalType) HeaderText="Signal Type" EditType="EditType.DropDownEdit">
			<EditTemplate>
				<SfDropDownList TItem="DisplayTagModel" TValue="string" @bind-Value="@((context as DisplayTagModel).SignalType)" DataSource="@signalTypes">
					<DropDownListFieldSettings Value="SignalType" Text="SignalType"></DropDownListFieldSettings>
				</SfDropDownList>
			</EditTemplate>
		</GridColumn>
		<GridColumn Field=@nameof(DisplayTagModel.EngUnit) HeaderText="Eng unit" />
		<GridColumn Field=@nameof(DisplayTagModel.SWPath) HeaderText="SW Path Type"  />
		<GridColumn Field=@nameof(DisplayTagModel.DBName) HeaderText="DB Name" />
		<GridColumn Field=@nameof(DisplayTagModel.RangeLow) HeaderText="Range L" />
		<GridColumn Field=@nameof(DisplayTagModel.RangeHigh) HeaderText="Range H" />
		<GridColumn Field=@nameof(DisplayTagModel.LowLowLimit) HeaderText="Alm LL"  />
		<GridColumn Field=@nameof(DisplayTagModel.LowLimit) HeaderText="Alm L"  />
		<GridColumn Field=@nameof(DisplayTagModel.HighLimit) HeaderText="Alm H"  />
		<GridColumn Field=@nameof(DisplayTagModel.HighHighLimit) HeaderText="Alm HH"  />
		<GridColumn Field=@nameof(DisplayTagModel.ModbusAddress) HeaderText="Modbus Address" />
		<GridColumn Field=@nameof(DisplayTagModel.ModbusBit) HeaderText="Modbus Bit" />
		<GridColumn Field=@nameof(DisplayTagModel.AbsoluteAddress) HeaderText="Abs Address" />
	</GridColumns>
</SfGrid>


@code {
	public string message;
	List<string>? Cabinets;
	List<string>? Otds;
	List<string>? IoTypes;
	public List<DisplayTagModel> ioTypes { get; set; } = new List<DisplayTagModel>();
	public List<DisplayTagModel> signalTypes { get; set; } = new List<DisplayTagModel>();
	List<string>? SignalTypes;
	List<DisplayTagModel>? Tags;
	SfGrid<DisplayTagModel>? TagGrid;
	SfGrid<DisplayObjectModel>? ObjectGrid;
	public DisplayObjectModel? SelectedObject { get; set; }
	public DisplayTagModel? SelectedTag { get; set; }
	private List<Object> TagToolbarItems = new List<Object>() { "Add", "Delete", "Edit", "Update", "Cancel", new ItemModel() { Text = "Duplicate", TooltipText = "Duplicate", PrefixIcon = "e-duplicate", Id = "Duplicate" } };

	bool IsAdd { get; set; }

	public async Task CellSavedHandler(CellSavedArgs<DisplayTagModel> args)
	{
		var index = await TagGrid.GetRowIndexByPrimaryKey(args.RowData.Id);
		if (args.ColumnName == "IoType")
		{
			string selectedIoType = args.Value.ToString();
			SignalTypes = (await _subCategoryDB.GetSignalTypeNames(selectedIoType)).ToList();
			signalTypes = SignalTypes.Select(signalTypeName => new DisplayTagModel() { SignalType = signalTypeName }).ToList();
			SignalTypeEditParams.Params.DataSource = signalTypes;
			await TagGrid.UpdateCellAsync(index, "SignalType", null);
			await TagGrid.UpdateCellAsync(index, "Signal Type 2", null);
			args.RowData.SignalType = null;
		}
		else if (args.ColumnName == "FullTagName")
		{
			var item = TagGrid.DataSource;
			// await TagGrid.UpdateCell(index, "ObjectId", SelectedObject.Id);
		}
	}

	public DropDownEditCellParams? CabinetEditParams = new DropDownEditCellParams
	{
		Params = new DropDownListModel<object, object>()
		{
			DataSource = new List<DisplayObjectModel>()
		}
	};
	public DropDownEditCellParams? OtdEditParams = new DropDownEditCellParams
	{
		Params = new DropDownListModel<object, object>()
		{
			DataSource = new List<DisplayObjectModel>()
		}
	};
	public DropDownEditCellParams? IoTypeEditParams = new DropDownEditCellParams
	{
		Params = new DropDownListModel<object, object>()
		{
				DataSource = new List<DisplayTagModel>()
		}
	};
	public DropDownEditCellParams? SignalTypeEditParams = new DropDownEditCellParams
	{
		Params = new DropDownListModel<object, object>()
		{
			DataSource = new List<DisplayTagModel>()
		}
	};

	protected override async Task OnInitializedAsync()
	{
		Cabinets = new List<string>(await _categoryDB.GetCabinetNames());
		Otds = new List<string>(await _categoryDB.GetOtdNames());
		IoTypes = new List<string>(await _categoryDB.GetIoTypeNames());
		List<DisplayObjectModel> cabinets = Cabinets.Select(cabinetName => new DisplayObjectModel() { Cabinet = cabinetName }).ToList();
		List<DisplayObjectModel> otds = Otds.Select(otdName => new DisplayObjectModel() { Otd = otdName }).ToList();
		ioTypes = IoTypes.Select(ioTypeName => new DisplayTagModel() { IoType = ioTypeName }).ToList();

		CabinetEditParams.Params.DataSource = cabinets;
		OtdEditParams.Params.DataSource = otds;
		IoTypeEditParams.Params.DataSource = ioTypes;
	}

	public async Task GetSelectedObject(RowSelectEventArgs<DisplayObjectModel> args)
	{
		SelectedObject = (await this.ObjectGrid.GetSelectedRecordsAsync()).FirstOrDefault();

		Tags = await _tagDB.GetTagsByObjectIdAsync(SelectedObject.Id);
		foreach (var tag in Tags)
		{
			tag.ObjectName = SelectedObject.FullObjectName;
		}

		StateHasChanged();
	}

	public async Task GetSelectedTag(RowSelectEventArgs<DisplayTagModel> args)
	{
		SelectedTag = (await this.TagGrid.GetSelectedRecordsAsync()).FirstOrDefault();

		if (SelectedTag.ObjectId == 0)
		{
			SelectedTag.ObjectId = SelectedObject.Id;
		}

		if (SelectedTag.IoType != null)
		{
			SignalTypes = (await _subCategoryDB.GetSignalTypeNames(SelectedTag.IoType)).ToList();
			signalTypes = SignalTypes.Select(signalTypeName => new DisplayTagModel() { SignalType = signalTypeName }).ToList();
			SignalTypeEditParams.Params.DataSource = signalTypes;
		}

		StateHasChanged();
	}

	public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
	{
		if (args.Item.Text == "Add")
		{
			var tagChanges = await this.TagGrid.GetBatchChangesAsync();
			// var batchChanges = new BatchChanges<DisplayTagModel>()
			// {
			// 	AddedRecords = new List<DisplayTagModel>() { new DisplayTagModel() { ObjectId = SelectedObject.Id} }
			// };
			// await TagGrid.ApplyBatchChangesAsync(batchChanges);

		}
		if (args.Item.Text == "Update")
		{
			var tagChanges = await this.TagGrid.GetBatchChangesAsync();

			if (tagChanges.ChangedRecords.Count > 0)
			{
				foreach (var tag in tagChanges.ChangedRecords)
				{
					await _tagDB.UpdateTagAsync(tag);
				}
			}
			if (tagChanges.DeletedRecords.Count > 0)
			{
				foreach (var tag in tagChanges.DeletedRecords)
				{
					await _tagDB.DeleteTagAsync(tag.Id);
				}
			}
			if (tagChanges.AddedRecords.Count > 0)
			{
				foreach (var tag in tagChanges.AddedRecords)
				{
					await _tagDB.InsertTagAsync(SelectedObject.Id, tag);
				}
			}

			Tags = await _tagDB.GetTagsByObjectIdAsync(SelectedObject.Id);
			foreach (var tag in Tags)
			{
				tag.ObjectName = SelectedObject.FullObjectName;
			}
		}
	}

	// Implementing custom adaptor by extending the DataAdaptor class
	public class CustomAdaptor : DataAdaptor
	{
		public IObjectService _objectService { get; set; }
		public static List<DisplayObjectModel>? Objects = new List<DisplayObjectModel>();
		IEnumerable<DisplayObjectModel> GridData { get; set; }

		public CustomAdaptor(IObjectService objectService)
		{
			_objectService = objectService;
		}

		// Performs data Read operation
		public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
		{
			Objects = await _objectService.GetObjectsAsync();
			GridData = Objects;

			if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
			{
				GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
			}

			if (dataManagerRequest.Where != null && dataManagerRequest.Where.Count > 0)
			{
				// Filtering
				GridData = DataOperations.PerformFiltering(GridData, dataManagerRequest.Where, dataManagerRequest.Where[0].Operator);
			}

			if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
			{
				// Searching
				GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
			}

			return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = Objects.Count() } : (object)GridData;
		}

		public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
		{
			await _objectService.InsertObjectAsync(value as DisplayObjectModel);
			return value;
		}

		public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
		{
			int objectId = (int)value;
			await _objectService.DeleteObjectAsync(objectId);
			return value;
		}

		public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
		{
			DisplayObjectModel updatedObject = (value as DisplayObjectModel);
			await _objectService.UpdateObjectAsync(updatedObject);
			return updatedObject;
		}
	}
}
