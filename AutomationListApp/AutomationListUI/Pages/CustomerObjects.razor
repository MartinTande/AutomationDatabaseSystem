@page "/customer-objects"

@inject ISnackbar Snackbar
@inject IObjectService _objectService
@inject ITagService _tagService
@inject ExcelService _excelService
@inject CategoryDataManager _categoryDM
@inject SubCategoryDataManager _subCategoryDM
@inject IDialogService _dialogService

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
	<!-- Object Grid-->
	<MudDataGrid 
		T="DisplayObjectModel"
		Items="@Objects"
		@ref="@ObjectGrid"
		Height="600px"
		MultiSelection="false"
		RowStyleFunc="@_objectRowStyleFunc"
		SortMode="SortMode.Multiple"
		Filterable=false
		QuickFilter="@_quickFilter"
		Hover=true
		HeaderClass="font-weight:bold"
		FixedHeader=true
		ColumnResizeMode=@ResizeMode.Container
		Striped=true
		Dense=true
		ReadOnly=@(_objectGridState is State.Normal)
		SelectedItem="@SelectedObject"
		EditMode="@DataGridEditMode.Cell"
		SelectedItemChanged="@SelectedObjectChanged"
		SelectedItemsChanged="@SelectedObjectsChanged"
		EditTrigger="@DataGridEditTrigger.OnRowClick">
		<ToolBarContent>
			<MudStack>
				<MudStack Row="true" Spacing="2">
					<MudText Typo="Typo.h6">Objects</MudText>
					<MudText Typo="Typo.h6">@objectCount</MudText>
					<MudButton Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Disabled=@(_objectGridState is not State.Normal) OnClick="@AddEmptyObjectRow">Add</MudButton>
					<MudButton Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Disabled=@(_objectGridState is not State.Normal || SelectedObject is null) OnClick="@StartObjectEditMode">Edit</MudButton>
					<MudButton Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Disabled=@(_objectGridState is State.Normal) OnClick="@SaveObjectIfValid">Save</MudButton>
					<MudButton Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Disabled=@(_objectGridState is not State.Normal || SelectedObject is null) OnClick="@DeleteObject">Delete</MudButton>
					<MudButton Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Disabled=@(_objectGridState is State.Normal) OnClick="@CancelObjectOperation">Cancel</MudButton>
					<MudButton Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ContentCopy" Disabled=@(_objectGridState is not State.Normal || SelectedObject is null) OnClick="@DuplicateObject">Duplicate</MudButton>
					<MudFileUpload Class="me-2" T="IBrowserFile" @ref="excelUpload" FilesChanged="UploadFile">
						<ActivatorContent>
							<MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Custom.FileFormats.FileExcel">Import Excel</MudButton>
						</ActivatorContent>
					</MudFileUpload>
					<MudButton Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Custom.FileFormats.FileExcel" OnClick="@ExportToExcel">Export Excel</MudButton>
				</MudStack>
				<MudStack Row="true" Spacing="0">
					<MudTextField @bind-Value="_sfiNrSearch" Immediate="true" Label="Sfi Nr" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true" Style="width: 100px" />
					<MudTextField @bind-Value="_mainEqNrSearch" Immediate="true" Label="Main Eq Nr" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true" Style="width: 110px" />
					<MudTextField @bind-Value="_eqNrSearch" Immediate="true"  Label="Eq Nr" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true" Style="width: 120px" />
					<MudTextField @bind-Value="_objectNameSearch" Immediate="true"  Label="Object Name" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true"  Style="width: 120px" />
					<MudTextField @bind-Value="_descSearch" Immediate="true"  Label="Description" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true" Style="width: 120px" />
					<MudTextField @bind-Value="_vduGroupSearch" Immediate="true" Label="Vdu Group" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true" Style="width: 110px" />
					<MudTextField @bind-Value="_cabinetSearch" Immediate="true"  Label="Cabinet" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable="true" Style="width: 110px" />
					<MudButton Size="Size.Small" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Clear" OnClick="@ClearFilters">Clear filters</MudButton>
				</MudStack>
			</MudStack>
		</ToolBarContent>
    
		<Columns>
			<SelectColumn T="DisplayObjectModel" />
			<PropertyColumn Property="x => x.SfiNumber" Title="Sfi" Required="true">
				<EditTemplate>
					<MudForm @bind-IsValid="@_sfiNumberIsValid">
						<MudTextField @bind-Value="context.Item.SfiNumber" Margin="@Margin.Dense" For="@(() => context.Item.SfiNumber)" />
					</MudForm>
				</EditTemplate>
			</PropertyColumn>
			<PropertyColumn Property="x => x.MainEqNumber" Title="Main Eq" Required="true">
				<EditTemplate>
					<MudForm @bind-IsValid="@_mainEqNumberIsValid">
						<MudTextField @bind-Value="context.Item.MainEqNumber" Margin="@Margin.Dense" For="@(() => context.Item.MainEqNumber)" />
					</MudForm>
				</EditTemplate>
			</PropertyColumn>
			<PropertyColumn Property="x => x.EqNumber" Title="Eq" Required="false"/>
			<PropertyColumn Property="x => x.FullObjectName" Title="Object Name" SortBy="@_sortByName" CellStyleFunc="@_cellStyleFunc">
				<EditTemplate>
					<MudForm @bind-IsValid="@_objectNameIsValid">
						<MudTextField @bind-Value="context.Item.FullObjectName" ReadOnly="true" Validation="@(new ObjectNameValidator2(_objectService))" />
					</MudForm>
				</EditTemplate>
			</PropertyColumn>
			<PropertyColumn Property="x => x.Description" Title="Description">
				<EditTemplate>
					<MudForm @bind-IsValid="@_descriptionIsValid">
						<MudTextField @bind-Value="context.Item.Description" Clearable Margin="@Margin.Dense" For="() => context.Item.Description"/>
					</MudForm>
				</EditTemplate>
			</PropertyColumn>
			<PropertyColumn Property="x => x.VduGroup" Title="Vdu Group">
				<EditTemplate>
					<MudForm @bind-IsValid="@_vduGroupIsValid">
						<MudTextField @bind-Value="context.Item.VduGroup" Clearable Margin="@Margin.Dense" For="() => context.Item.VduGroup" />
					</MudForm>
				</EditTemplate>
			</PropertyColumn>
			<PropertyColumn Property="x => x.ObjectType" Title="Object Type">
				<EditTemplate>
					<MudSelect @bind-Value="context.Item.ObjectType" T="string" Clearable AnchorOrigin="Origin.BottomCenter">
						@foreach (var type in ObjectTypes)
						{
							<MudSelectItem Value="@type.Name"/>
						}
					</MudSelect>
				</EditTemplate>
			</PropertyColumn>
			<PropertyColumn Property="x => x.Cabinet" Title="Cabinet">
				<EditTemplate>
					<MudSelect @bind-Value="context.Item.Cabinet" T="string" AnchorOrigin="Origin.BottomCenter">
						@foreach (var cabinet in Cabinets)
						{
							<MudSelectItem Value="@cabinet.Name" />
						}
					</MudSelect>
				</EditTemplate>
			</PropertyColumn>
			<PropertyColumn Property="x => x.Revision" Title="Revision" Required=false />
		</Columns>
	</MudDataGrid>
<br>
	<!-- Tag grid -->
	<MudDataGrid 
		T="DisplayTagModel"
		Items="@Tags"
		RowStyleFunc="@_tagRowStyleFunc"
		SortMode="SortMode.Multiple"
		Hover=true
		Dense=true
		Filterable="false"
		Striped=true
		Height="300px"
		ReadOnly=@(_tagGridState is State.Normal)
		SelectedItem="@SelectedTag"
		SelectedItemChanged="@GetSelectedTag"
		EditMode="@DataGridEditMode.Cell"
		EditTrigger="@DataGridEditTrigger.OnRowClick">
	<ToolBarContent>
		<MudStack Row="true" Spacing="2">
			<MudText Typo="Typo.h6">Tags</MudText>
			<MudButton Size="Size.Small" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Disabled=@(_tagGridState is not State.Normal) OnClick="@AddEmptyTagRow">Add</MudButton>
			<MudButton Size="Size.Small" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Disabled=@(_tagGridState is not State.Normal || SelectedTag is null) OnClick="@StartTagEditMode">Edit</MudButton>
			<MudButton Size="Size.Small" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Disabled=@(_tagGridState is State.Normal) OnClick="@SaveTagIfValid">Save</MudButton>
			<MudButton Size="Size.Small" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Disabled=@(_tagGridState is not State.Normal || SelectedTag is null) OnClick="@DeleteTag">Delete</MudButton>
			<MudButton Size="Size.Small" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Disabled=@(_tagGridState is State.Normal) OnClick="@CancelTagOperation">Cancel</MudButton>
		</MudStack>
	</ToolBarContent>
	<Columns>
		<SelectColumn T="DisplayTagModel" />
		<PropertyColumn Property="x => x.FullTagName" Title="Tag Name" Editable=false/>
		<PropertyColumn Property="x => x.EqSuffix" Title="Eq" Required="true">
			<EditTemplate>
				<MudForm @bind-IsValid="@_eqSuffixIsValid">
					<MudTextField @bind-Value="context.Item.EqSuffix" Margin="@Margin.Dense" For="() => context.Item.Description" />
				</MudForm>
			</EditTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.Description" Title="Description">
			<EditTemplate>
				<MudForm @bind-IsValid="@_descriptionIsValid">
					<MudTextField @bind-Value="context.Item.Description" Clearable Margin="@Margin.Dense" For="() => context.Item.Description" />
				</MudForm>
			</EditTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.IoType" Title="Io Type">
			<EditTemplate>
				<MudSelect @bind-Value="context.Item.IoType" T="string" AnchorOrigin="Origin.BottomCenter" OnClose="@(()=>IoTypeChange(context.Item))">
				@foreach (var ioType in IoTypes)
				{
					<MudSelectItem Value="@ioType.Name" />
				}
				</MudSelect>
			</EditTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.SignalType" Title="Signal Type">
			<EditTemplate>
				<MudSelect @bind-Value="context.Item.SignalType" T="string" AnchorOrigin="Origin.BottomCenter">
					@foreach (var signalType in SignalTypes)
					{
						<MudSelectItem Value="@signalType.Name" />
					}
				</MudSelect>
			</EditTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.EngUnit" Title="Eng Unit">
			<EditTemplate>
				<MudSelect @bind-Value="context.Item.EngUnit" T="string" AnchorOrigin="Origin.BottomCenter" ReadOnly="@(context.Item.IsDigital)">
					@foreach (var engUnit in EngUnits)
					{
						<MudSelectItem Value="@engUnit.Name" />
					}
				</MudSelect>
			</EditTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.AlarmDelay" Title="Alm Delay" Editable=false>
			<EditTemplate>
				<MudForm>
					<MudTextField @bind-Value="context.Item.AlarmDelay" Margin="@Margin.Dense" ReadOnly="@(context.Item.IsDigital)" />
				</MudForm>
			</EditTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.RangeLow" Title="Range Low" Editable=false>
			<EditTemplate>
				<MudForm>
					<MudTextField @bind-Value="context.Item.RangeLow" Margin="@Margin.Dense" ReadOnly="@(context.Item.IsDigital)" />
				</MudForm>
			</EditTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.RangeHigh" Title="Range High" Editable=false>
			<EditTemplate>
				<MudForm>
					<MudTextField @bind-Value="context.Item.RangeHigh" Margin="@Margin.Dense" ReadOnly="@(context.Item.IsDigital)" />
				</MudForm>
			</EditTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.LowLowLimit" Title="Alm LL" Editable=false>
			<EditTemplate>
				<MudForm>
					<MudNumericField @bind-Value="context.Item.LowLowLimit" Margin="@Margin.Dense" ReadOnly="@(context.Item.IsDigital)" />
				</MudForm>
			</EditTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.LowLimit" Title="Alm L" Editable=false>
			<EditTemplate>
				<MudForm>
					<MudNumericField @bind-Value="context.Item.LowLimit" Margin="@Margin.Dense" ReadOnly="@(context.Item.IsDigital)" />
				</MudForm>
			</EditTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.HighLimit" Title="Alm H" Editable=false>
			<EditTemplate>
				<MudForm>
					<MudNumericField @bind-Value="context.Item.HighLimit" Margin="@Margin.Dense" ReadOnly="@(context.Item.IsDigital)" />
				</MudForm>
			</EditTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.HighHighLimit" Title="Alm HH" Editable=false>
			<EditTemplate>
				<MudForm>
					<MudNumericField @bind-Value="context.Item.HighHighLimit" Margin="@Margin.Dense" ReadOnly="@(context.Item.IsDigital)" />
				</MudForm>
			</EditTemplate>
		</PropertyColumn>
	</Columns>
</MudDataGrid>
</MudContainer>

@code {
	// Validator checks
	private bool _objectNameIsValid;
	private bool _sfiNumberIsValid;
	private bool _mainEqNumberIsValid;
	private bool _descriptionIsValid;
	private bool _vduGroupIsValid;
	private bool _eqSuffixIsValid;
	private bool _tagNameIsValid;
	private bool _ioTypeIsValid;

	// Search strings
	private string? _sfiNrSearch;
	private string? _mainEqNrSearch;
	private string? _eqNrSearch;
	private string? _objectNameSearch;
	private string? _descSearch;
	private string? _vduGroupSearch;
	private string? _objectTypeSearch;
	private string? _cabinetSearch;

	// Filter
	private int objectCount;

	// Excel
	MudFileUpload<IBrowserFile>? excelUpload;
	const int MAX_ALLOWED_FILE_SIZE = 1_500_000;    // Bytes

	// Color
	const string EDIT_STATE_COLOR = "#c9d8f0";
	const string SELECTED_ITEM_COLOR = "#d0d5d9";

	// Objects and tags
	public List<DisplayTagModel>? Tags { get; set; }
	public List<DisplayObjectModel>? Objects { get; set; }
	public DisplayTagModel? SelectedTag { get; set; }
	public DisplayObjectModel? SelectedObject { get; set; }
	public HashSet<DisplayObjectModel> SelectedObjects { get; set; } = new();

	// Categories
	public List<IoType>? IoTypes { get; set; } = new();
	public List<Cabinet>? Cabinets { get; set; } = new();
	public List<EngUnit>? EngUnits { get; set; } = new();
	public List<SignalType>? SignalTypes { get; set; } = new();
	public List<ObjectType>? ObjectTypes { get; set; } = new();

	// Data grids
	public MudDataGrid<DisplayObjectModel>? ObjectGrid { get; set; }
	public MudDataGrid<DisplayTagModel>? TagGrid { get; set; }

	private State _objectGridState;
	private State _tagGridState;

	private List<string> _events = new();

	protected override async Task OnInitializedAsync()
	{
		_objectGridState = State.Normal;
		_tagGridState = State.Normal;

		await GetObjects();
		IoTypes = await _categoryDM.GetIoTypes();
		EngUnits = await _categoryDM.GetEngUnits();
		Cabinets = await _categoryDM.GetCabinets();
		ObjectTypes = await _categoryDM.GetObjectTypeCategory();

		if (IoTypes is null) return;

		foreach (var ioType in IoTypes)
		{
			ioType.SignalTypes = await _subCategoryDM.GetSignalTypesAsync(ioType.Name);
		}
	}

	#region Excel
	private async Task UploadFile(IBrowserFile file)
	{
		if (file is null) return;

		try
		{
			using var stream = new MemoryStream();
			await file.OpenReadStream(MAX_ALLOWED_FILE_SIZE).CopyToAsync(stream);

			stream.Position = 0;

			List<DisplayObjectModel> excelObjects = _excelService.ReadExcelObjects(stream);

			var parameters = new DialogParameters<ImportDialog>
			{
				{x => x.objects, excelObjects}
			};

			var options = new DialogOptions() { FullScreen = true, CloseOnEscapeKey = true, CloseButton = true };

			var dialog = await _dialogService.ShowAsync<ImportDialog>("Ready to import", parameters, options);
			var result = await dialog.Result;

			if (result != null && !result.Canceled)
			{
				await ObjectGrid.ReloadServerData();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
			throw;
		}
	}

	private async Task ExportToExcel()
	{
		
	}

	#endregion

	#region Sorting and Filter functions
	private Func<DisplayObjectModel, bool> _quickFilter => x =>
	{
		var filters = new List<Func<DisplayObjectModel, bool>>();

		// Add filters dynamically based on non-empty search strings
		if (!string.IsNullOrWhiteSpace(_sfiNrSearch))
			filters.Add(obj => obj.SfiNumber.Contains(_sfiNrSearch, StringComparison.OrdinalIgnoreCase));

		if (!string.IsNullOrWhiteSpace(_mainEqNrSearch))
			filters.Add(obj => obj.MainEqNumber.Contains(_mainEqNrSearch, StringComparison.OrdinalIgnoreCase));

		if (!string.IsNullOrWhiteSpace(_eqNrSearch))
			filters.Add(obj => obj.EqNumber.Contains(_eqNrSearch, StringComparison.OrdinalIgnoreCase));

		if (!string.IsNullOrWhiteSpace(_objectNameSearch))
			filters.Add(obj => obj.FullObjectName.Contains(_objectNameSearch, StringComparison.OrdinalIgnoreCase));

		if (!string.IsNullOrWhiteSpace(_descSearch))
			filters.Add(obj => obj.Description.Contains(_descSearch, StringComparison.OrdinalIgnoreCase));

		if (!string.IsNullOrWhiteSpace(_objectTypeSearch))
			filters.Add(obj => obj.ObjectType.Contains(_objectTypeSearch, StringComparison.OrdinalIgnoreCase));

		if (!string.IsNullOrWhiteSpace(_vduGroupSearch))
			filters.Add(obj => obj.VduGroup.Contains(_vduGroupSearch, StringComparison.OrdinalIgnoreCase));

		if (!string.IsNullOrWhiteSpace(_cabinetSearch))
			filters.Add(obj => obj.Cabinet.Contains(_cabinetSearch, StringComparison.OrdinalIgnoreCase));

		// Return true if no filters are specified (i.e., show all items)
		if (!filters.Any())
			return true;

		// Check if the object satisfies all the filters
		return filters.All(filter => filter(x));
	};

	private Func<DisplayObjectModel, object> _sortByName => x =>
	{
		return x.FullObjectName;
	};

	public void ClearFilters()
	{
		_sfiNrSearch = string.Empty;
		_mainEqNrSearch = string.Empty;
		_eqNrSearch = string.Empty;
		_objectNameSearch = string.Empty;
		_descSearch = string.Empty;
		_vduGroupSearch = string.Empty;
		_cabinetSearch = string.Empty;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		try
		{
			if (ObjectGrid != null && ObjectGrid.FilteredItems != null)
			{
				var newFilteredCount = ObjectGrid.FilteredItems.Count();
				if (newFilteredCount != objectCount)
				{
					objectCount = newFilteredCount;
					StateHasChanged();
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}
	#endregion
	
	#region events
	void SelectedObjectsChanged(HashSet<DisplayObjectModel> items)
	{
		_events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
	}

	private async Task SelectedObjectChanged(DisplayObjectModel item)
	{
		SelectedObject = item;
		if (SelectedObject is null || SelectedObject.Tags is null) return;

		Tags = SelectedObject.Tags;
		foreach (var tag in Tags)
		{
			tag.ObjectName = SelectedObject.FullObjectName;
		}
	}
	#endregion

	#region Object methods
	private async Task GetObjects()
	{
		Objects = await _objectService.GetObjectsAsync();

		if (Objects is null) return;

		foreach (var obj in Objects)
		{
			obj.Tags = await _tagService.GetTagsByObjectIdAsync(obj.Id);
		}
		StateHasChanged();
	}

	private void AddEmptyObjectRow()
	{
		_objectGridState = State.Add;
		_events.Insert(0, $"StartedAddingItem, 0");
		Objects.Insert(0, new DisplayObjectModel());
	}

	private async Task DuplicateObject()
	{
		if (SelectedObject == null) return;

		DisplayObjectModel newObject = SelectedObject;

		int counter = 1;
		string newName = SelectedObject.FullObjectName;

		List<string> objectNames = Objects.Select(obj => obj.FullObjectName).ToList();

		// Keep adding "_01", "_02", etc. until a unique name is found
		while (objectNames.Contains(newName))
		{
			newName = $"{SelectedObject.FullObjectName}_{counter:00}";
			newObject.EqNumber = $"{SelectedObject.EqNumber}_{counter:00}";
			counter++;
		}

		await _objectService.InsertObjectAsync(newObject);
		int newObjectId = await _objectService.GetLastInsertedObjectId();
		foreach (var tag in SelectedObject.Tags)
		{
			await _tagService.InsertTagAsync(newObjectId, tag);
		}

		await GetObjects();
	}

	private async void SaveObjectIfValid()
	{
		DisplayObjectModel obj = new();
		switch (_objectGridState)
		{
			case State.Add:
				obj = Objects[0];
				break;
			case State.Edit:
				obj = SelectedObject;
				break;
			default:
				break;
		}
		if (!ObjectIsValid(obj))
		{
			Snackbar.Add("Object is not valid, not saved", Severity.Error);
			return;
		}
		try
		{
			obj = await AddOtdBasedOnObjectType(obj);
			await _objectService.InsertObjectAsync(obj);
			await AddTagsBasedOnObjectType(obj);
			Snackbar.Add("Object saved", Severity.Success);
		}
		catch
		{
			Snackbar.Add("Object not saved, something went wrong", Severity.Error);
		}

		await GetObjects();
		_objectGridState = State.Normal;
	}

	private bool ObjectIsValid(DisplayObjectModel obj)
	{
		return (_sfiNumberIsValid && _mainEqNumberIsValid && _objectNameIsValid && _descriptionIsValid && _vduGroupIsValid && obj is not null);
	}

	private async Task DeleteObject()
	{
		var tags = await _tagService.GetTagsByObjectIdAsync(SelectedObject.Id);
		foreach (var tag in tags)
		{
			await _tagService.DeleteTagAsync(tag.Id);
		}
		await _objectService.DeleteObjectAsync(SelectedObject.Id);

		await GetObjects();
		_objectGridState = State.Normal;
	}

	private async void StartObjectEditMode()
	{
		_objectGridState = State.Edit;
	}

	private async Task<DisplayObjectModel> AddOtdBasedOnObjectType(DisplayObjectModel displayObject)
	{
		if (displayObject.ObjectType is null)
		{
			return displayObject;
		}
		displayObject.Otd = await _categoryDM.GetOtdByObjectType(displayObject.ObjectType);
		return displayObject;
	}


	private async Task AddTagsBasedOnObjectType(DisplayObjectModel displayObject)
	{
		if (displayObject.ObjectType != null)
		{
			var objectTypeTags = await _tagService.GetTagsByObjectTypeAsync(displayObject.ObjectType);
			int displayObjectId = await _objectService.GetLastInsertedObjectId();
			foreach (var tag in objectTypeTags)
			{
				await _tagService.InsertTagAsync(displayObjectId, tag);
			}
		}
	}

	private async Task CancelObjectOperation()
	{
		_objectGridState = State.Normal;
		await GetObjects();
	}
	#endregion

	#region Tag Methods
	private void AddEmptyTagRow()
	{
		_tagGridState = State.Add;
		Tags.Insert(0, new DisplayTagModel(){ ObjectName=SelectedObject.FullObjectName });
	}

	private async void IoTypeChange(DisplayTagModel tag)
	{
		SignalTypes = await _subCategoryDM.GetSignalTypesAsync(tag.IoType);
		tag.SignalType = null;
		StateHasChanged();
	}

	private void GetSelectedTag(DisplayTagModel tag)
	{
		SelectedTag = tag;
		StateHasChanged();
	}

	private async void SaveTagIfValid()
	{
		DisplayTagModel tag = new();
		switch (_tagGridState)
		{
			case State.Add:
				tag = Tags[0];
				break;
			case State.Edit:
				tag = SelectedTag;
				break;
			default:
				break;
		}
		if (!TagIsValid(tag))
		{
			Snackbar.Add("Tag is not valid, not saved", Severity.Error);
			return;
		}
		try
		{
			await _tagService.InsertTagAsync(SelectedObject.Id, tag);
			Snackbar.Add("Tag saved", Severity.Success);
		}
		catch
		{
			Snackbar.Add("Tag not saved, something went wrong", Severity.Error);
		}

		await GetObjects();
		_tagGridState = State.Normal;
	}

	private bool TagIsValid(DisplayTagModel tag)
	{
		return (_eqSuffixIsValid && _ioTypeIsValid && tag is not null);
	}

	private async Task DeleteTag()
	{
		var tags = await _tagService.GetTagsByObjectIdAsync(SelectedObject.Id);
		foreach (var tag in tags)
		{
			await _tagService.DeleteTagAsync(tag.Id);
		}
		await _objectService.DeleteObjectAsync(SelectedObject.Id);

		await GetObjects();
		_tagGridState = State.Normal;
	}

	private async void StartTagEditMode()
	{
		_tagGridState = State.Edit;
	}

	private async Task CancelTagOperation()
	{
		_tagGridState = State.Normal;
		await GetObjects();
	}
	#endregion

	#region Style functions
	private Func<DisplayObjectModel, int, string> _objectRowStyleFunc => (x, i) =>
	{
		string style = string.Empty;
		switch (_objectGridState)
		{
			case State.Normal:
				if (x.Equals(SelectedObject))
				{
					style += $"background-color:{SELECTED_ITEM_COLOR}";
				}
				break;
			case State.Add:
				if (x.Id != 0)
				{
					style += "pointer-events: none;";
				}
				break;
			case State.Edit:
				if (!x.Equals(SelectedObject))
				{
					style += "pointer-events: none;";
				}
				else
				{
					style += $"background-color:{EDIT_STATE_COLOR}";
				}
				break;
			default:
				break;
		}

		return style;
	};

	private Func<DisplayTagModel, int, string> _tagRowStyleFunc => (x, i) =>
	{
		string style = string.Empty;
		switch (_tagGridState)
		{
			case State.Normal:
				if (x.Equals(SelectedTag))
				{
					style += $"background-color:{SELECTED_ITEM_COLOR}";
				}
				break;
			case State.Add:
				if (x.Id != 0)
				{
					style += "pointer-events: none;";
				}
				break;
			case State.Edit:
				if (!x.Equals(SelectedTag))
				{
					style += "pointer-events: none;";
				}
				else
				{
					style += $"background-color:{EDIT_STATE_COLOR}";
				}
				break;
			default:
				break;
		}

		return style;
	};

	private Func<DisplayObjectModel, string> _cellStyleFunc => x =>
	{
	return ";font-weight:bold";
	};
	#endregion

	public enum State
	{
		Add,
		Edit,
		Normal
	}
}

<style>
	.mud-toolbar{
		height: 110px
	}

	.mud-input,
	.mud-input-control > .mud-input-control-input-container > .mud-input-label-inputcontrol {
		font-size: 0.9rem; /* 1 rem is default */
	}

	.bold-header {
		font-weight: bold;
	}

/* 	.mud-menu{
		display: none;
	} */

</style>