@page "/objects"

@using AutomationListLibrary
@using AutomationListLibrary.Data
@using AutomationListLibrary.DataManager
@using AutomationListUI.Models
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations

@inject IObjectDataManager _objectDB 


<h1>Objects Page</h1>

<div style="margin-left:280px"><p style="color:red;" id="message">@message</p></div>

@if (objects is null)
{
	<p><em>Loading...</em></p>
}
else
{
	<SfGrid 
		DataSource="@objects"
		AllowFiltering="true" 
		AllowReordering="true"
		AllowResizing="true" 
		AllowExcelExport="true" 
		AllowSelection="true"
		AllowSorting="true" 
		Toolbar=@Toolbaritems Height="315">
			<GridEvents OnToolbarClick="ToolbarClickHandler" TValue="ObjectModel" />
			<GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="Syncfusion.Blazor.Grids.EditMode.Batch"></GridEditSettings>
			<GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
			<GridPageSettings PageSizes="true"></GridPageSettings>
			<GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
			<GridColumns>
				<GridColumn Type='Syncfusion.Blazor.Grids.ColumnType.CheckBox' Width="50"></GridColumn>
				<GridColumn Field=@nameof(DisplayObjectModel.FullObjectName) HeaderText="Object Name" ValidationRules="@(new ValidationRules{ Required=true, MaxLength=20 })"></GridColumn>
				<GridColumn Field=@nameof(DisplayObjectModel.Description) HeaderText="Description" ValidationRules="@(new ValidationRules{ Required=true, MaxLength=46 })"></GridColumn>
				<GridColumn Field=@nameof(DisplayObjectModel.Hierarchy1) HeaderText="Hierarchy 1"></GridColumn>
				<GridColumn Field=@nameof(DisplayObjectModel.Hierarchy2) HeaderText="Hierarchy 2"></GridColumn>
				<GridColumn Field=@nameof(DisplayObjectModel.AcknowledgeAllowed) HeaderText="Acknowledge Allowed"></GridColumn>
				<GridColumn Field=@nameof(DisplayObjectModel.AlwaysVisible) HeaderText="Always Visible"></GridColumn>
				<GridColumn Field=@nameof(DisplayObjectModel.Otd) HeaderText="OTD" ValidationRules="@(new ValidationRules{ Required=true })"></GridColumn>
				<GridColumn Field=@nameof(DisplayObjectModel.Cabinet) HeaderText="Cabinet" ValidationRules="@(new ValidationRules{ Required=true })"></GridColumn>
				<GridColumn Field=@nameof(DisplayObjectModel.Node) HeaderText="Node" ValidationRules="@(new ValidationRules{ Required=true,  })"></GridColumn>
				<GridColumn Field=@nameof(DisplayObjectModel.VduGroup) HeaderText="Vdu Group" ValidationRules="@(new ValidationRules{ Required=true })"></GridColumn>
				<GridColumn Field=@nameof(DisplayObjectModel.AlarmGroup) HeaderText="Alarm Group" ValidationRules="@(new ValidationRules{ Required=true })"></GridColumn>
			</GridColumns>
	</SfGrid>
}


@code{
	private SfGrid<ObjectModel> Grid;
	private List<ObjectModel> objects;
	public string message;
	private DisplayObjectModel newObject = new DisplayObjectModel();
	private List<Object> Toolbaritems = new List<Object>() { "Add", "Delete", "Edit", "Update", "Cancel", new ItemModel() { Text = "Duplicate", TooltipText = "Duplicate", PrefixIcon = "e-duplicate", Id = "Duplicate" } };

	protected override async Task OnInitializedAsync()
	{
		objects = await _objectDB.GetObjects();
	}

	public async Task InsertObject()
	{
		ObjectModel objModel = new ObjectModel
		{
			SfiNumber = newObject.SfiNumber,
			Description = newObject.Description,
			Hierarchy1 = newObject.Hierarchy1,
			Hierarchy2 = newObject.Hierarchy1,
			AcknowledgeAllowed = newObject.AcknowledgeAllowed,
			AlwaysVisible = newObject.AlwaysVisible,
			Otd = newObject.Otd,
			VduGroup = newObject.VduGroup,
			AlarmGroup = newObject.AlarmGroup,
			Cabinet = newObject.Cabinet,
			Node = newObject.Node
		};

		await _objectDB.InsertObject(objModel);

		objects.Add(objModel);

		newObject = new DisplayObjectModel();
	}

	public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
	{
		if (args.Item.Text == "Add")
		{
			//message = "Added";
		}
		if (args.Item.Text == "Delete")
		{
			message = "Added";
		}
		if (args.Item.Text == "Edit")
		{
			message = "Added";
		}
		if (args.Item.Text == "Update")
		{
			message = "Custom Toolbar Clicked";
			//You can customize your code here.
		}
	}

	public class CustomAdaptor : DataAdaptor
	{
		public override async Task<object> InsertAsync(DataManager DataManager, object Value, string Key)
		{
			// Add your insert logic here
			// This method will be invoked when inserting new records into the Blazor DataGrid component.
			
			return Value;
		}
	}
}
