@inject ISnackbar Snackbar
@inject IObjectService _objectService
@inject ExcelService _excelService
@inject CategoryDataManager _categoryDM
@inject SubCategoryDataManager _subCategoryDM


<MudDialog>
    <DialogContent>
		<!-- Objects -->
		<MudDataGrid
			T="DisplayObjectModel"
			Items="@objects"
			@ref="@ObjectGrid"
			MultiSelection="false"
			SortMode="SortMode.Multiple"
			Hover=true
			QuickFilter="@_quickFilter"
			ReadOnly=@(_objectGridState is State.Normal)
			Height="700px"
			FixedHeader=true
			RowStyleFunc="@_objectRowStyleFunc"
			ColumnResizeMode=@ResizeMode.Container
			Striped=true
			Dense=true
			EditMode="@DataGridEditMode.Cell"
			SelectedItemChanged="@SelectedObjectChanged"
			EditTrigger="@DataGridEditTrigger.OnRowClick">
			<ToolBarContent>
				<MudStack Row="true" Spacing="2">
					<MudText Typo="Typo.h6">Objects</MudText>
					<MudText Typo="Typo.h6">@objectCount</MudText>
					<MudButton Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Disabled=@(_objectGridState is not State.Normal || SelectedObject is null) OnClick="@StartObjectEditMode">Edit</MudButton>
					<MudButton Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Disabled=@(_objectGridState is State.Normal) OnClick="@SaveObjectIfValid">Save</MudButton>
					<MudButton Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Disabled=@(_objectGridState is not State.Normal || SelectedObject is null) OnClick="@DeleteObject">Delete</MudButton>
					<MudButton Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Cancel" Disabled=@(_objectGridState is State.Normal) OnClick="@CancelObjectOperation">Cancel</MudButton>
					<MudCheckBox @bind-Value=@_filterObjects Label="Filter On Ready to Import"></MudCheckBox>
				</MudStack>
			</ToolBarContent>
			<Columns>
				<SelectColumn T="DisplayObjectModel" />
				<PropertyColumn Property="x => x.SfiNumber" Title="Sfi" Required="true" CellStyleFunc="@_objectCellStyleFunc">
					<EditTemplate>
						<MudForm @bind-IsValid="@_sfiNumberIsValid">
							<MudTextField @bind-Value="context.Item.SfiNumber" Margin="@Margin.Dense" For="@(() => context.Item.SfiNumber)" />
						</MudForm>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.MainEqNumber" Title="Main Eq" Required="true" CellStyleFunc="@_objectCellStyleFunc">
					<EditTemplate>
						<MudForm @bind-IsValid="@_mainEqNumberIsValid">
							<MudTextField @bind-Value="context.Item.MainEqNumber" Margin="@Margin.Dense" For="@(() => context.Item.MainEqNumber)" />
						</MudForm>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.EqNumber" Title="Eq" Required="false" CellStyleFunc="@_objectCellStyleFunc" />
				<PropertyColumn Property="x => x.FullObjectName" Title="Object Name" CellStyleFunc="@_objectCellStyleFunc">
					<EditTemplate>
						<MudForm @bind-IsValid="@_objectNameIsValid">
							<MudTextField @bind-Value="context.Item.FullObjectName" Validation="@(new ObjectNameValidator2(_objectService))" />
						</MudForm>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.Description" Title="Description" CellStyleFunc="@_objectCellStyleFunc">
					<EditTemplate>
						<MudForm @bind-IsValid="@_descriptionIsValid">
							<MudTextField @bind-Value="context.Item.Description" Clearable Margin="@Margin.Dense" For="() => context.Item.Description" />
						</MudForm>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.VduGroup" Title="Vdu Group" CellStyleFunc="@_objectCellStyleFunc">
					<EditTemplate>
						<MudForm @bind-IsValid="@_vduGroupIsValid">
							<MudTextField @bind-Value="context.Item.VduGroup" Clearable Margin="@Margin.Dense" For="() => context.Item.VduGroup" />
						</MudForm>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.Node" Title="Node" CellStyleFunc="@_objectCellStyleFunc">
					<EditTemplate>
						<MudSelect @bind-Value="context.Item.Node" T="string" AnchorOrigin="Origin.BottomCenter">
							@foreach (var nodes in Nodes)
							{
								<MudSelectItem Value="@nodes.Name" />
							}
						</MudSelect>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.Cabinet" Title="Cabinet" CellStyleFunc="@_objectCellStyleFunc">
					<EditTemplate>
						<MudSelect @bind-Value="context.Item.Cabinet" T="string" AnchorOrigin="Origin.BottomCenter">
							@foreach (var cabinet in Cabinets)
							{
								<MudSelectItem Value="@cabinet.Name" />
							}
						</MudSelect>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.Otd" Title="Otd" CellStyleFunc="@_objectCellStyleFunc">
					<EditTemplate>
						<MudSelect @bind-Value="context.Item.Otd" T="string" Clearable AnchorOrigin="Origin.BottomCenter">
							@foreach (var type in Otds)
							{
								<MudSelectItem Value="@type.Name" />
							}
						</MudSelect>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.Hierarchy1" Title="Main Picture" CellStyleFunc="@_objectCellStyleFunc">
					<EditTemplate>
						<MudSelect @bind-Value="context.Item.Hierarchy1" T="string" AnchorOrigin="Origin.BottomCenter">
							@foreach (var mainPicture in MainPictures)
							{
								<MudSelectItem Value="@mainPicture.Name" />
							}
						</MudSelect>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.Hierarchy2" Title="Sub Picture" CellStyleFunc="@_objectCellStyleFunc">
					<EditTemplate>
						<MudSelect @bind-Value="context.Item.Hierarchy2" T="string" AnchorOrigin="Origin.BottomCenter">
							@foreach (var subPicture in SubPictures)
							{
								<MudSelectItem Value="@subPicture.Name" />
							}
						</MudSelect>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.EasGroup" Title="Eas Group" CellStyleFunc="@_objectCellStyleFunc">
					<EditTemplate>
						<MudSelect @bind-Value="context.Item.EasGroup" T="string" Clearable AnchorOrigin="Origin.BottomCenter">
							@foreach (var easGroup in EasGroups)
							{
								<MudSelectItem Value="@easGroup.Name" />
							}
						</MudSelect>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.AlarmGroup" Title="Alarm Group" CellStyleFunc="@_objectCellStyleFunc">
					<EditTemplate>
						<MudSelect @bind-Value="context.Item.AlarmGroup" T="string" Clearable AnchorOrigin="Origin.BottomCenter">
							@foreach (var alarmGroup in AlarmGroups)
							{
								<MudSelectItem Value="@alarmGroup.Name" />
							}
						</MudSelect>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.AcknowledgeAllowed" Title="Acknowledge Allowed" CellStyleFunc="@_objectCellStyleFunc">
					<EditTemplate>
						<MudSelect @bind-Value="context.Item.AcknowledgeAllowed" T="string" AnchorOrigin="Origin.BottomCenter">
							@foreach (var ackAllowedGroup in AcknowledgeAllowedGroups)
							{
								<MudSelectItem Value="@ackAllowedGroup.Name" />
							}
						</MudSelect>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.AlwaysVisible" Title="Always Visible" CellStyleFunc="@_objectCellStyleFunc">
					<EditTemplate>
						<MudSelect @bind-Value="context.Item.AlwaysVisible" T="string" AnchorOrigin="Origin.BottomCenter">
							@foreach (var alwaysVisibleGroup in AlwaysVisibleGroups)
							{
								<MudSelectItem Value="@alwaysVisibleGroup.Name" />
							}
						</MudSelect>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.Revision" Title="Revision" Required=false />
			</Columns>
		</MudDataGrid>
		<!-- Tags -->
		<MudDataGrid 
			T="DisplayTagModel"
			Items="@Tags"
			SortMode="SortMode.Multiple"
			Hover=true
			Dense=true
			Filterable="false"
			Striped=true
			Height="300px"
			EditMode="@DataGridEditMode.Cell"
			EditTrigger="@DataGridEditTrigger.OnRowClick">
			<Columns>
				<SelectColumn T="DisplayTagModel" />
				<PropertyColumn Property="x => x.FullTagName" Title="Tag Name" Editable=false CellStyleFunc="@_tagCellStyleFunc" />
				<PropertyColumn Property="x => x.EqSuffix" Title="Eq" Required="true" CellStyleFunc="@_tagCellStyleFunc">
					<EditTemplate>
						<MudForm @bind-IsValid="@_eqSuffixIsValid">
							<MudTextField @bind-Value="context.Item.EqSuffix" Margin="@Margin.Dense" For="() => context.Item.Description" />
						</MudForm>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.Description" Title="Description" CellStyleFunc="@_tagCellStyleFunc">
					<EditTemplate>
						<MudForm @bind-IsValid="@_descriptionIsValid">
							<MudTextField @bind-Value="context.Item.Description" Clearable Margin="@Margin.Dense" For="() => context.Item.Description" />
						</MudForm>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.Symbol" Title="Symbol" CellStyleFunc="@_tagCellStyleFunc">
					<EditTemplate>
						<MudSelect @bind-Value="context.Item.Symbol" T="string" AnchorOrigin="Origin.BottomCenter">
							@foreach (var symbol in Symbols)
							{
								<MudSelectItem Value="@symbol.Name" />
							}
						</MudSelect>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.IoType" Title="Io Type" CellStyleFunc="@_tagCellStyleFunc">
					<EditTemplate>
						<MudSelect @bind-Value="context.Item.IoType" T="string" AnchorOrigin="Origin.BottomCenter" OnClose="@(()=>IoTypeChange(context.Item))">
							@foreach (var ioType in IoTypes)
							{
								<MudSelectItem Value="@ioType.Name" />
							}
						</MudSelect>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.SignalType" Title="Signal Type" CellStyleFunc="@_tagCellStyleFunc">
					<EditTemplate>
						<MudSelect @bind-Value="context.Item.SignalType" T="string" AnchorOrigin="Origin.BottomCenter">
							@foreach (var signalType in SignalTypes)
							{
								<MudSelectItem Value="@signalType.Name" />
							}
						</MudSelect>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.EngUnit" Title="Eng Unit" CellStyleFunc="@_tagCellStyleFunc">
					<EditTemplate>
						<MudSelect @bind-Value="context.Item.EngUnit" T="string" AnchorOrigin="Origin.BottomCenter" ReadOnly="@(context.Item.IsDigital)">
							@foreach (var engUnit in EngUnits)
							{
								<MudSelectItem Value="@engUnit.Name" />
							}
						</MudSelect>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.AlarmDelay" Title="Alm Delay" Editable=false CellStyleFunc="@_tagCellStyleFunc">
					<EditTemplate>
						<MudForm>
							<MudTextField @bind-Value="context.Item.AlarmDelay" Margin="@Margin.Dense" ReadOnly="@(context.Item.IsDigital)" />
						</MudForm>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.RangeLow" Title="Range Low" Editable=false CellStyleFunc="@_tagCellStyleFunc">
					<EditTemplate>
						<MudForm>
							<MudTextField @bind-Value="context.Item.RangeLow" Margin="@Margin.Dense" ReadOnly="@(context.Item.IsDigital)" />
						</MudForm>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.RangeHigh" Title="Range High" Editable=false>
					<EditTemplate>
						<MudForm>
							<MudTextField @bind-Value="context.Item.RangeHigh" Margin="@Margin.Dense" ReadOnly="@(context.Item.IsDigital)" />
						</MudForm>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.LowLowLimit" Title="Alm LL" Editable=false>
					<EditTemplate>
						<MudForm>
							<MudNumericField @bind-Value="context.Item.LowLowLimit" Margin="@Margin.Dense" ReadOnly="@(context.Item.IsDigital)" />
						</MudForm>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.LowLimit" Title="Alm L" Editable=false>
					<EditTemplate>
						<MudForm>
							<MudNumericField @bind-Value="context.Item.LowLimit" Margin="@Margin.Dense" ReadOnly="@(context.Item.IsDigital)" />
						</MudForm>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.HighLimit" Title="Alm H" Editable=false>
					<EditTemplate>
						<MudForm>
							<MudNumericField @bind-Value="context.Item.HighLimit" Margin="@Margin.Dense" ReadOnly="@(context.Item.IsDigital)" />
						</MudForm>
					</EditTemplate>
				</PropertyColumn>
				<PropertyColumn Property="x => x.HighHighLimit" Title="Alm HH" Editable=false>
					<EditTemplate>
						<MudForm>
							<MudNumericField @bind-Value="context.Item.HighHighLimit" Margin="@Margin.Dense" ReadOnly="@(context.Item.IsDigital)" />
						</MudForm>
					</EditTemplate>
				</PropertyColumn>
			</Columns>
		</MudDataGrid>
    </DialogContent>
	<DialogActions>
		<MudButton OnClick="Cancel">Cancel</MudButton>
		<MudButton OnClick="Submit" Color="Color.Primary" Variant="Variant.Filled">Submit</MudButton>
	</DialogActions>
</MudDialog>


@code {
	// Validator checks
	private bool _objectNameIsValid;
	private bool _sfiNumberIsValid;
	private bool _mainEqNumberIsValid;
	private bool _descriptionIsValid;
	private bool _vduGroupIsValid;
	private bool _eqSuffixIsValid;
	private bool _tagNameIsValid;
	private bool _ioTypeIsValid;

	// Filter
	private bool _filterObjects = false;
	private int objectCount;

	// Objects and tags
	public List<DisplayTagModel>? Tags { get; set; }
	public List<DisplayObjectModel>? Objects { get; set; }
	public DisplayTagModel? SelectedTag { get; set; }
	public DisplayObjectModel? SelectedObject { get; set; }
	public HashSet<DisplayObjectModel> SelectedObjects { get; set; } = new();

	// Categories
	public List<Otd>? Otds { get; set; } = new();
	public List<Node>? Nodes { get; set; } = new();
	public List<IoType>? IoTypes { get; set; } = new();
	public List<Symbol>? Symbols { get; set; } = new();
	public List<Cabinet>? Cabinets { get; set; } = new();
	public List<EngUnit>? EngUnits { get; set; } = new();
	public List<EasGroup>? EasGroups { get; set; } = new();
	public List<SignalType>? SignalTypes { get; set; } = new();
	public List<ObjectType>? ObjectTypes { get; set; } = new();
	public List<AlarmGroup>? AlarmGroups { get; set; } = new();
	public List<Hierarchy1>? MainPictures { get; set; } = new();
	public List<Hierarchy2>? SubPictures { get; set; } = new();
	public List<LocationGroup>? AlwaysVisibleGroups { get; set; } = new();
	public List<LocationGroup>? AcknowledgeAllowedGroups { get; set; } = new();

	// Data grids
	public MudDataGrid<DisplayObjectModel>? ObjectGrid { get; set; }
	public MudDataGrid<DisplayTagModel>? TagGrid { get; set; }

	// States 
	private State _objectGridState;

	// Parameters
	[Parameter]
	public List<DisplayObjectModel> objects { get; set; } = new();

	[CascadingParameter]
	public MudDialogInstance MudDialog { get; set; }

	private async Task Submit()
	{
		var result = await _excelService.ImportObjects(objects);
		if (result)
		{
			Snackbar.Add("Successfully imported the objects", Severity.Success);
			MudDialog.Close(DialogResult.Ok(true));
		}
		else
		{
			Snackbar.Add("Failed to import the objects", Severity.Error);
		}
	}

	private void Cancel()
	{
		MudDialog.Cancel();
	}

	private async void IoTypeChange(DisplayTagModel tag)
	{
		SignalTypes = await _subCategoryDM.GetSignalTypesAsync(tag.IoType);
		tag.SignalType = null;
		StateHasChanged();
	}

	private async Task SelectedObjectChanged(DisplayObjectModel item)
	{
		SelectedObject = item;
		if (SelectedObject is null || SelectedObject.Tags is null) return;

		Tags = SelectedObject.Tags;
		foreach (var tag in Tags)
		{
			tag.ObjectName = SelectedObject.FullObjectName;
		}
	}

	private Func<DisplayObjectModel, string> _objectCellStyleFunc => x =>
	{
		string style = "";

		return style;
	};

	private Func<DisplayTagModel, string> _tagCellStyleFunc => x =>
	{
		string style = "";

		return style;
	};

	private Func<DisplayObjectModel, int, string> _objectRowStyleFunc => (x, i) =>
	{
		string VALID_OBJECT_COLOR = "#8CED8C";
		string INVALID_OBJECT_COLOR = "#eb7886";
		return x.ReadyForPreliminaryPLCGeneration ? $"background-color:{VALID_OBJECT_COLOR}" : $"background-color:{INVALID_OBJECT_COLOR}";
	};

	private Func<DisplayObjectModel, bool> _quickFilter => x =>
	{
		var filters = new List<Func<DisplayObjectModel, bool>>();

		// Add filters dynamically based on non-empty search strings
		if (_filterObjects)
			filters.Add(obj => obj.ReadyForPreliminaryPLCGeneration.Equals(false));

		// Return true if no filters are specified (i.e., show all items)
		if (!filters.Any())
			return true;

		// Check if the object satisfies all the filters
		return filters.All(filter => filter(x));
	};

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		try
		{
			if (ObjectGrid is null || ObjectGrid.FilteredItems is null) return;
			
			var newFilteredCount = ObjectGrid.FilteredItems.Count();
			if (newFilteredCount != objectCount)
			{
				objectCount = newFilteredCount;
				StateHasChanged();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	#region Object methods
	private async void SaveObjectIfValid()
	{
		DisplayObjectModel obj = new();
		switch (_objectGridState)
		{
			case State.Add:
				obj = Objects[0];
				break;
			case State.Edit:
				obj = SelectedObject;
				break;
			default:
				break;
		}
		if (!ObjectIsValid(obj))
		{
			Snackbar.Add("Object is not valid, not saved", Severity.Error);
			return;
		}
		try
		{
			objects.Add(obj);
			Snackbar.Add("Object saved", Severity.Success);
		}
		catch
		{
			Snackbar.Add("Object not saved, something went wrong", Severity.Error);
		}

		_objectGridState = State.Normal;
	}

	private bool ObjectIsValid(DisplayObjectModel obj)
	{
		return (_sfiNumberIsValid && _mainEqNumberIsValid && _objectNameIsValid && _descriptionIsValid && _vduGroupIsValid && obj is not null);
	}

	private async Task DeleteObject()
	{
		if (SelectedObject is null) return;

		objects.Remove(SelectedObject);

		_objectGridState = State.Normal;
	}

	private async void StartObjectEditMode()
	{
		_objectGridState = State.Edit;
	}
	
	private async Task CancelObjectOperation()
	{
		_objectGridState = State.Normal;
	}
	#endregion

	public enum State
	{
		Add,
		Edit,
		Normal
	}
}
